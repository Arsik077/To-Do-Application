{"ast":null,"code":"var _jsxFileName = \"C:\\\\React\\\\todolist\\\\src\\\\Components\\\\AllCards.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport Card from \"./Card\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AllCards(props) {\n  _s();\n\n  const [data, setData] = useState([]);\n\n  async function loadData() {\n    let response = await fetch(\"http://localhost:8000/api/allTodo\", {\n      method: \"GET\",\n      withCredentials: true,\n      cache: \"no-cache\",\n      credentials: \"same-origin\",\n      mode: \"cors\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      redirect: \"follow\",\n      referrerPolicy: \"no-referrer\"\n    });\n    let Data = await response.json();\n    setData(Data);\n  }\n\n  console.log(context);\n  useEffect(() => {\n    loadData();\n  }, [props.newCardAddedId]);\n  const advertisement = data === null || data === void 0 ? void 0 : data.map(advertisement => /*#__PURE__*/_jsxDEV(Card, {\n    advertisement: advertisement\n  }, advertisement.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    children: advertisement\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 10\n  }, this);\n}\n\n_s(AllCards, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n\n_c = AllCards;\nexport default AllCards;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllCards\");","map":{"version":3,"sources":["C:/React/todolist/src/Components/AllCards.js"],"names":["React","useEffect","useState","Card","AllCards","props","data","setData","loadData","response","fetch","method","withCredentials","cache","credentials","mode","headers","Accept","redirect","referrerPolicy","Data","json","console","log","context","newCardAddedId","advertisement","map","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvB,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;;AAEA,iBAAeM,QAAf,GAA0B;AACxB,QAAIC,QAAQ,GAAG,MAAMC,KAAK,CAAC,mCAAD,EAAsC;AAC9DC,MAAAA,MAAM,EAAE,KADsD;AAE9DC,MAAAA,eAAe,EAAE,IAF6C;AAG9DC,MAAAA,KAAK,EAAE,UAHuD;AAI9DC,MAAAA,WAAW,EAAE,aAJiD;AAK9DC,MAAAA,IAAI,EAAE,MALwD;AAM9DC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OANqD;AAU9DC,MAAAA,QAAQ,EAAE,QAVoD;AAW9DC,MAAAA,cAAc,EAAE;AAX8C,KAAtC,CAA1B;AAaA,QAAIC,IAAI,GAAG,MAAMX,QAAQ,CAACY,IAAT,EAAjB;AACAd,IAAAA,OAAO,CAACa,IAAD,CAAP;AACD;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AAEAvB,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,QAAQ;AACT,GAFQ,EAEN,CAACH,KAAK,CAACoB,cAAP,CAFM,CAAT;AAIA,QAAMC,aAAa,GAAGpB,IAAH,aAAGA,IAAH,uBAAGA,IAAI,CAAEqB,GAAN,CAAWD,aAAD,iBAC9B,QAAC,IAAD;AAA6B,IAAA,aAAa,EAAEA;AAA5C,KAAWA,aAAa,CAACE,EAAzB;AAAA;AAAA;AAAA;AAAA,UADoB,CAAtB;AAIA,sBAAO;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cAAsBF;AAAtB;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;GA/BQtB,Q;;KAAAA,Q;AAiCT,eAAeA,QAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nfunction AllCards(props) {\r\n  const [data, setData] = useState([]);\r\n\r\n  async function loadData() {\r\n    let response = await fetch(\"http://localhost:8000/api/allTodo\", {\r\n      method: \"GET\",\r\n      withCredentials: true,\r\n      cache: \"no-cache\",\r\n      credentials: \"same-origin\",\r\n      mode: \"cors\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      redirect: \"follow\",\r\n      referrerPolicy: \"no-referrer\",\r\n    });\r\n    let Data = await response.json();\r\n    setData(Data);\r\n  }\r\n  console.log(context);\r\n\r\n  useEffect(() => {\r\n    loadData();\r\n  }, [props.newCardAddedId]);\r\n\r\n  const advertisement = data?.map((advertisement) => (\r\n    <Card key={advertisement.id} advertisement={advertisement} />\r\n  ));\r\n\r\n  return <div className=\"row\">{advertisement}</div>;\r\n}\r\n\r\nexport default AllCards;\r\n"]},"metadata":{},"sourceType":"module"}